import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import mplhep as hep
import scipy.optimize as spo
import scipy.signal as ssp
hep.style.use("CMS")

#d_2 = 18.75  cm s =3
#s = 4 + , d= 17 cm


def loss_function(coordinates: list, alpha: np.array, d:np.array, s:np.array):
    X, Y = coordinates
    theta = np.arctan2(Y,(X-s))
    phi = np.arctan2(Y,(d-X))
    inner_value = np.pi - alpha - theta - phi
    return np.sum(np.abs(inner_value)**2)


# alpha_test = np.array([0.5,0.5,0.5,0.5])
# d_test = np.array([2,2,2,2])
# s_test = np.array([2,2,2,2])

alpha_test = np.array([2.3081964491798392, 2.3142023829709757, 2.3197733559778384, 2.3249546567620767, 2.329785537056053, 2.3343001790695665, 2.338528483680446, 2.3424967168194795, 2.346228042786138, 2.1975392280059434, 2.20354516179708, 2.2091161348039425, 2.214297435588181, 2.2191283158821573, 2.2236429578956707, 2.22787126250655, 2.2318394956455836, 2.2355708216122423, 2.0556421734017793, 2.061648107192916, 2.0672190801997785, 2.072400380984017, 2.0772312612779933, 2.0817459032915067, 2.085974207902386, 2.0899424410414196, 2.0936737670080783, 1.8757886736093012, 1.8817946074004375, 1.8873655804073002, 1.8925468811915387, 1.8973777614855152, 1.9018924034990288, 1.9061207081099079, 1.9100889412489412, 1.9138202672156, 1.657119727735359, 1.6631256615264953, 1.668696634533358, 1.6738779353175965, 1.6787088156115728, 1.6832234576250866, 1.6874517622359657, 1.691419995374999, 1.6951513213416578, 1.412141064608495, 1.4181469983996313, 1.423717971406494, 1.4288992721907325, 1.433730152484709, 1.4382447944982226, 1.4424730991091017, 1.446441332248135, 1.4501726582147938, 1.1671624014816309, 1.173168335272767, 1.1787393082796298, 1.1839206090638683, 1.1887514893578448, 1.1932661313713584, 1.1974944359822375, 1.2014626691212709, 1.2051939950879296, 0.9484934556076889, 0.9544993893988253, 0.9600703624056879, 0.9652516631899265, 0.9700825434839028, 0.9745971854974164, 0.9788254901082956, 0.9827937232473289, 0.9865250492139876, 0.7686399558152108, 0.7746458896063472, 0.7802168626132098, 0.7853981633974484, 0.7902290436914247, 0.7947436857049383, 0.7989719903158174, 0.8029402234548508, 0.8066715494215095, 0.6267429012110468, 0.6327488350021832, 0.6383198080090458, 0.6435011087932844, 0.6483319890872606, 0.6528466311007742, 0.6570749357116534, 0.6610431688506868, 0.6647744948173455, 0.5160856800371509, 0.5220916138282873, 0.5276625868351499, 0.5328438876193885, 0.5376747679133648, 0.5421894099268784, 0.5464177145377576, 0.5503859476767909, 0.5541172736434496, 0.429347341361166, 0.43535327515230227, 0.44092424815916487, 0.4461055489434035, 0.45093642923737975, 0.45545107125089335, 0.4596793758617726, 0.4636476090008059, 0.4673789349674647, 0.3604908520601216, 0.3664967858512579, 0.3720677588581205, 0.3772490596423591, 0.3820799399363354, 0.38659458194984897, 0.3908228865607282, 0.39479111969976155, 0.3985224456664203, 0.30499234681440474, 0.310998280605541, 0.3165692536124036, 0.32175055439664224, 0.3265814346906185, 0.3310960767041321, 0.33532438131501136, 0.3392926144540447, 0.34302394042070344])
d_test = np.array([31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39, 31, 32, 33, 34, 35, 36, 37, 38, 39])
s_test = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14])


# alpha_test = alpha_test[:6]
# d_test = d_test[:6]
# s_test = s_test[:6]
#X_guess = (d_test[0]+s_test[0])/2
X_guess = (d_test[0]-s_test[0])/2

Y_guess = ((d_test[0]-s_test[0]))/(np.tan(alpha_test[0]))

# X_guess = 99

# Y_guess = 99


print("X Guess ", X_guess)
print("Y Guess ", Y_guess)

res_x = []
res_y = []

# X_guess = 
# Y_guess = 10

x_err = []
y_err = []

# 
# Y_guess -= 7

for i in range(0,4):
    #result = spo.basinhopping(func=loss_function, x0=[X_guess,Y_guess], niter=800, T=0, minimizer_kwargs = {"args":(alpha_test,d_test,s_test),"bounds":([min(s_test),max(d_test)],[1, 8])})
    #inv_hessian = result.lowest_optimization_result.hess_inv.todense()
    result = spo.basinhopping(func=loss_function, x0=[X_guess,Y_guess], niter=800, T=0, minimizer_kwargs = {"args":(alpha_test,d_test,s_test)})
    inv_hessian = result.lowest_optimization_result.hess_inv
    print(inv_hessian)
    det_inv_hessian = inv_hessian[0][0] * inv_hessian[1][1] - inv_hessian[0][1] * inv_hessian[1][0]
    res_x.append(result.x[0])
    res_y.append(result.x[1])
    x_err.append(np.sqrt(inv_hessian[1][1]/det_inv_hessian))
    y_err.append(np.sqrt(inv_hessian[0][0]/det_inv_hessian))
    # x_err.append(np.sqrt(inv_hessian[0][0]))
    # y_err.append(np.sqrt(inv_hessian[1][1]))

res_x =  np.array(res_x)
res_y = np.array(res_y)
print("",np.mean(res_x)," +/- ",np.mean(x_err), "Range: ", max(res_x) - min(res_x))
print("",np.mean(res_y)," +/- ",np.mean(y_err), "Range: ", max(res_x) - min(res_x))


# res_x = res_x[res_x > 0]
# res_y = res_y[res_y > 0]


# X_high = np.percentile(res_x,75)
# X_low = np.percentile(res_x,25)
# Y_high = np.percentile(res_y,75)
# Y_low = np.percentile(res_y,25)

# X_cut = 1.5*(X_high - X_low)
# Y_cut = 1.5*(Y_high - Y_low)

# X_lower, X_upper = X_low - X_cut, X_high + X_cut
# X_bounded = res_x[(res_x > X_lower) & (res_x < X_upper)]

# Y_lower, Y_upper = Y_low - Y_cut, Y_high + Y_cut
# Y_bounded = res_y[(res_y > Y_lower) & (res_y < Y_upper)]

# print("X bounded mean", np.mean(X_bounded))
# print("Y bouned mean", np.mean(Y_bounded))

# # X = 5 
# Y = 10
# s = 1
# d = 8
# alpha = 0.67
# theta = 1.28
# phi = 1.19


